name: Terraform CI

on:
  pull_request:
    branches:
      - '**'
  workflow_dispatch:

permissions:
      id-token: write
      contents: read

jobs:
  terraform-ci:
    name: Terraform Validate and Format
    runs-on: ubuntu-latest

    steps:

      # Display the event that triggered the workflow
      - run: echo "The job was triggered by a ${{ github.event_name }} event."

       # Information about the repository and branch
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."

      # - name: 'Az CLI login'
      #   # run: az login --service-principal -u ${{ secrets.AZURE_CLIENT_ID }} -p=${{ secrets.ARM_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}
      #   uses: azure/login@v1
      #   with:
      #     # creds: '${{ secrets.AZURE_CREDENTIALS }}'
      #       client-id: ${{ secrets.AZURE_CLIENT_ID }}
      #       tenant-id: ${{ secrets.AZURE_TENANT_ID }}
      #       subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # - name: 'Run Azure CLI commands'
      #   run: |
      #       az account show
    
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.1

       # Save all directories containing terraform files in a variable
      - name: Find Directories
        id: find_dirs
        run: |
          tfDIRS=$(find . -name '*.tf' -exec dirname {} \; | sort -u)
          for dir in $tfDIRS; do
            echo "Found Terraform files in directory: $dir"
          done
          {
            echo 'tfDIRS<<EOF'
            echo "$tfDIRS"
            echo EOF
          } >> "$GITHUB_ENV"

      # Terraform initialization ignoring backend.tf
      - name: Terraform Init
        run: |
          tfDIRS="${{ env.tfDIRS }}"
          for dir in $tfDIRS; do
            (cd "$dir" &&
            echo "Renaming the backend configuration file to make it unusable..." &&
            mv backend.tf backend.tf.example &&
            echo "Initializing Terraform in directory: $dir" &&
            terraform init)
          done

      - name: Terraform Format Check
        run: |
          tfDIRS="${{ env.tfDIRS }}"
          for dir in $tfDIRS; do
            echo "Running terraform fmt in directory: $dir"
            (cd "$dir" && terraform fmt)
          done

      - name: Terraform Validate
        run: |
          tfDIRS="${{ env.tfDIRS }}"
          for dir in $tfDIRS; do
            echo "Running terraform validate in directory: $dir"
            (cd "$dir" && terraform validate)
          done
