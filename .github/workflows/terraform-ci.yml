name: Terraform CI

on:
  workflow_call:
    inputs:
      working-directory:
        required: false
        type: string
  workflow_dispatch:

jobs:
  # Save all directories containing terraform files in a variable only if the working directory is empty
  find-tf-dirs:
    if: ${{ !inputs.working-directory }}
    runs-on: ubuntu-latest
    name: Find Terraform Directories
    outputs:
      tfDIRS: ${{ steps.find_dirs.outputs.tfDIRS }}
      
    steps:

      - name: Checkout repository
        uses: actions/checkout@v2
    
      - name: Find Directories
        id: find_dirs
        run: |
          tfDIRS=$(find . -name '*.tf' -exec dirname {} \; | sort -u)
          for dir in $tfDIRS; do
            echo "Found Terraform files in directory: $dir"
          done
          {
            echo 'tfDIRS<<EOF'
            echo "$tfDIRS"
            echo EOF
          } >> "$GITHUB_OUTPUT"

  terraform-ci:
    runs-on: ubuntu-latest
    name: Terraform Validate and Format
    needs: find-tf-dirs
    # env:
    #   tfDIRS: ${{needs.find-tf-dirs.outputs.tfDIRS}}

    steps:
    
      # Display the event that triggered the workflow
      - run: echo "The job was triggered by a ${{ github.event_name }} event."

       # Information about the repository and branch
      - run: echo "The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
    
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.1

      - name: Set tfDIRS variable
        run: |
          if [ -n "${{ needs.find-tf-dirs.outputs.tfDIRS }}" ]; then
            echo "tfDIRS=${{ needs.find-tf-dirs.outputs.tfDIRS }}" >> $GITHUB_ENV
          elif [ -n "${{ inputs.working-directory }}" ]; then
            echo "tfDIRS=${{ inputs.working-directory }}" >> $GITHUB_ENV
          else
            echo "No Terraform directories found or specified."
            exit 1
          fi

      # - name: Set tfDIRS variable
      #   run: |
      #     echo hola1
      #     if [ "${{ inputs.working-directory }}" ]; then
      #       echo hola2
      #       echo "tfDIRS=${{ inputs.working-directory }}" >> $GITHUB_ENV
      #     else
      #       echo hola3
      #       # echo ${{ needs.find-tf-dirs.outputs.tfDIRS }}
      #       # echo "tfDIRS=${{ needs.find-tf-dirs.outputs.tfDIRS }}" >> $GITHUB_ENV
      #       # echo $tfDIRS
      #     fi

      # Terraform initialization ignoring backend.tf
      - name: Terraform Init
        run: |
          tfDIRS="${{ env.tfDIRS }}"
          for dir in $tfDIRS; do
            (cd "$dir" &&
            echo "Initializing Terraform in directory: $dir" &&
            terraform init -backend=false)
          done

      # - name: Terraform Format Check
      #   run: |
      #     tfDIRS="${{ env.tfDIRS }}"
      #     for dir in $tfDIRS; do
      #       echo "Running terraform fmt in directory: $dir"
      #       (cd "$dir" && terraform fmt --check)
      #     done

      # - name: Terraform Validate
      #   run: |
      #     tfDIRS="${{ env.tfDIRS }}"
      #     for dir in $tfDIRS; do
      #       echo "Running terraform validate in directory: $dir"
      #       (cd "$dir" && terraform validate)
      #     done
