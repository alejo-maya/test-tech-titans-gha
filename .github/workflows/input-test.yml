name: Test Inputs in RunTime

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./pocs/infrastructure/terraform/webapp

    steps:

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Create Issue Requesting Variable File
        id: create-issue
        uses: actions/github-script@v6
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Specify Variable File for Terraform Plan',
              body: 'Please specify the variable file to use for Terraform plan by commenting with `/varfile <filename>`.'
            });
            core.setOutput("issue_number", issue.data.number);

      - name: Debug Issue Number
        run: echo "${{ steps.create-issue.outputs.issue_number }}"

      # - name: testTEST
      #   id: wait-for-input
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const issue_number = `${{ steps.create-issue.outputs.issue_number }}`;

      #       // Check if the file exists in the repository
      #       const exists = await github.rest.repos.getContent({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         path: 'pocs/infrastructure/terraform/webapp'
      #       })
            
      #       console.log("F__" + JSON.stringify(exists))
      #       console.log("a la perinola")

            
      

      - name: Wait for User Input and Check Variable File
        id: wait-for-input
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = `${{ steps.create-issue.outputs.issue_number }}`;
            const regex = /.*\.tfvars$/;
            let varFile = '';

            while (!varFile) {
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });

              const lastComment = comments.length > 0 ? comments[comments.length - 1] : null;
              
              if (lastComment && lastComment.user.login !== 'github-actions[bot]') {
                if (regex.test(lastComment.body)) {
                
                  varFile = lastComment.body;
                
                  // Check if the file exists in the repository
                  const exists = await github.rest.repos.getContent({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    path: `pocs/infrastructure/terraform/webapp/${varFile}`
                  }).then(() => true).catch(() => false);

                  if (exists) {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue_number,
                      body: `Variable file set to \`${varFile}\`. Continuing with the workflow.`
                    });
                    console.log(`Variable file set to ${varFile}. Continuing with the workflow.`);
                  } else {
                    await github.rest.issues.createComment({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      issue_number: issue_number,
                      body: `The file \`${varFile}\` does not exist in the repository. Please specify another variable file to use for Terraform plan by commenting with \`/varfile <filename.tfvars>\`.`
                    });
                    console.log(`The file ${varFile} does not exist in the repository. Please specify another variable file to use for Terraform plan.`);
                    varFile = '';
                  }
                } else {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `The comment \`${lastComment.body}\` is not valid. Please specify the variable file to use for Terraform plan by commenting with \`/varfile <filename.tfvars>\`.`
                  });
                  console.log( `The comment ${lastComment.body} is not valid. Please specify the variable file to use for Terraform plan.`);
                }
              }
              if (varFile === '') {
                console.log('Waiting for user input...');
                await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds before checking again
              }
            }

            core.setOutput("var_file", varFile);

      - name: Close Issue on Success/Failure/Cancel
        if: success() || failure() || cancelled()
        uses: actions/github-script@v6
        with:
          script: |
            const issue_number = `${{ steps.create-issue.outputs.issue_number }}`;
            const conclusion = `${{ job.status }}`
            let commentBody = '';

            switch (conclusion) {
              case 'success':
                commentBody = 'The workflow completed successfully. Closing the issue.';
                break;
              case 'failure':
                commentBody = 'The workflow encountered issues and failed. Closing the issue.';
                break;
              case 'cancelled':
                commentBody = 'The workflow was cancelled. Closing the issue.';
                break;
              default:
                commentBody = 'Unknown workflow conclusion. Closing the issue.';
            }

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              body: commentBody
            });

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              state: 'closed'
            });

      - name: Test Echo
        run: echo "${{ steps.wait-for-input.outputs.var_file }}"

      - name: Test Echo 2
        run: echo "Hola, hola"
