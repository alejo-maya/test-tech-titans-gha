name: Test Inputs in RunTime

on:
  workflow_dispatch:

permissions:
  contents: write
  issues: write

jobs:
  test:
    runs-on: ubuntu-latest

    steps:

      - name: Create Issue Requesting Variable File
        id: create-issue
        uses: actions/github-script@v4
        with:
          script: |
            const issue = await github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'Specify Variable File for Terraform Plan',
              body: 'Please specify the variable file to use for Terraform plan by commenting with `/varfile <filename>`.'
            });
            core.setOutput("issue_number", issue.data.number);

      - name: Debug Issue Number
        run: echo "Issue number is ${{ steps.create-issue.outputs.issue_number }}"

      - name: Wait for User Input
        id: wait-for-input
        uses: actions/github-script@v4
        with:
          script: |
            const issue_number = `${{ steps.create-issue.outputs.issue_number }}`;
            const regex = /.*\.tfvars$/;
            let varFile = '';

            while (!varFile) {
              const { data: comments } = await github.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue_number
              });

              const lastComment = comments.length > 0 ? comments[comments.length - 1] : null;
              
              if (lastComment && lastComment.user.login !== 'github-actions[bot]') {
                if (regex.test(lastComment.body)) {
                  varFile = lastComment.body;
                  await github.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `Variable file set to \`${varFile}\`. Continuing with the workflow.`
                  });
                } else {
                  await github.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue_number,
                    body: `The comment \`${lastComment.body}\` is not valid. Please specify the variable file to use for Terraform plan by commenting with \`/varfile <filename.tfvars>\`.`
                  });
                }
              }
              console.log('Waiting for user input...');
              await new Promise(resolve => setTimeout(resolve, 10000)); // Wait 10 seconds before checking again
            }

            core.setOutput("var_file", varFile);

      - name: Close Issue on Success
        if: success()
        uses: actions/github-script@v4
        with:
          script: |
            const issue_number = `${{ steps.create-issue.outputs.issue_number }}`;
            await github.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              state: 'closed'
            });

      - name: Close Issue on Cancel
        if: cancelled()
        uses: actions/github-script@v4
        with:
          script: |
            const issue_number = `${{ steps.create-issue.outputs.issue_number }}`;
            await github.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: issue_number,
              state: 'closed'
            });

      - name: Test Echo
        run: echo "${{ steps.wait-for-input.outputs.var_file }}"

      - name: Test Echo 2
        run: echo "Hola, hola"
